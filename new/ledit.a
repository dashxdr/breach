;#test	c:debug ram:test ram:o
;#test	ram:test levels/admiral
;#end


iecode_rbutton:	equ	$69
excloselibrary:	equ	-$19e
exopenlibrary:	equ	-$228
intclosewindow:	equ	-$48
intopenwindow:	equ	-$cc
wbenchscreen:	equ	1
iecode_lbutton:	equ	$68
windowdepth:	equ	4
smart_refresh:	equ	0
rmbtrap:	equ	$10000
customscreen:	equ	$f
backdrop:	equ	$100
reportmouse:	equ	$200
borderless:	equ	$800
activate:	equ	$1000
nocarerefresh:	equ	$20000
menupick:	equ	$100
rawkey:	equ	$400
closewindow:	equ	$200
mousemove:	equ	$10
mousebuttons:	equ	8
exfreemem:	equ	-$d2
exallocmem:	equ	-$c6
intopenscreen:	equ	-$c6
memf_public:	equ	1
memf_clear:	equ	$10000
intclosescreen:	equ	-$42
nw_screen:	equ	$1e
gfxloadrgb4:	equ	-$c0
sc_viewport:	equ	$2c
sc_bitmap:	equ	$b8
bm_planes:	equ	8
wd_userport:	equ	$56
exreplymsg:	equ	-$17a
im_mousey:	equ	$22
memf_chip:	equ	2
im_mousex:	equ	$20
im_qualifier:	equ	$1a
im_code:	equ	$18
im_class:	equ	$14
exgetmsg:	equ	-$174
exwaitport:	equ	-$180
dosclose:	equ	-$24
dosread:	equ	-$2a
dosopen:	equ	-$1e
doswrite:	equ	-$30
gfxtext:	equ	-$3c
rp_cp_x:	equ	$24
rp_cp_y:	equ	$26
gfxsetapen:	equ	-$156
wd_rport:	equ	$32
esckey:	equ	$45
tabkey:	equ	$42
qkey:	equ	$10
wkey:	equ	$11
ekey:	equ	$12
rkey:	equ	$13
tkey:	equ	$14
ykey:	equ	$15
ukey:	equ	$16
ikey:	equ	$17
okey:	equ	$18
pkey:	equ	$19
akey:	equ	$20
skey:	equ	$21
dkey:	equ	$22
fkey:	equ	$23
gkey:	equ	$24
hkey:	equ	$25
jkey:	equ	$26
kkey:	equ	$27
lkey:	equ	$28
zkey:	equ	$31
xkey:	equ	$32
ckey:	equ	$33
vkey:	equ	$34
bkey:	equ	$35
nkey:	equ	$36
mkey:	equ	$37
delkey:	equ	$46
backkey:	equ	$41
helpkey:	equ	$5f
upkey:	equ	$4c
downkey:	equ	$4d
leftkey:	equ	$4f
rightkey:	equ	$4e


vx:	equ	10
vy:	equ	8

edge:	equ	50
maxobjects:	equ	150
;object
	init	0
	byte	o_x
	byte	o_y
	byte	o_owner	;id
	byte	o_what
	word	o_floor
	label	o_size
;;thing
;	init	0
;	byte	t_x
;	byte	t_y
;	byte	t_id
;	byte	t_what
;	word	t_floor
;	label	t_size


;level
	init	0
	struct	l_levels,edge*edge*5
	word	l_floor
	word	l_xpos
	word	l_ypos
	word	l_tileoff
	word	l_tile
	word	l_obj
	word	l_guy
	word	l_oldtile
	word	l_oldobj
	mds	l_extra,12
	struct	l_objects,maxobjects*o_size
	label	l_size

padding:	equ	10000

	init	-$8000
	mds	execbase,4
	mds	dosbase,4
	mds	intbase,4
	mds	gfxbase,4
	mds	window,4
	mds	rport,4
	mds	uport,4
	mds	screen,4
	mds	planes,20
	mds	tiles,4
	mds	array,4
	mds	colortable,128
	mds	tilenum,2
	mds	ipoint,4
	mds	filename,64
	mds	button,2
	mds	clicked,1
	mds	temppad,1
	mds	levelsize,4
	mds	mask,8
	mds	scratch,1024
	mds	level,l_size+padding
	label	workspace

	move.l	a0,a2
	move.l	d0,d2
	move.l	4.w,a6
	move.l	#workspace+$8000,d0
	move.l	#memf_public+memf_clear,d1
	jsr	exallocmem(a6)
	tst.l	d0
	beq	nomem
	move.l	d0,a5
	suba	#$8000,a5

	move.l	a6,execbase(a5)

	move.l	a2,ipoint(a5)
	clr.b	-1(a2,d2)
	lea	filename(a5),a0
ccc:	move.b	(a2)+,(a0)+
	bne.s	ccc

	lea	gfxname(pc),a1
	moveq	#0,d0
	jsr	exopenlibrary(a6)
	move.l	d0,gfxbase(a5)
	lea	intname(pc),a1
	moveq	#0,d0
	jsr	exopenlibrary(a6)
	move.l	d0,intbase(a5)
	lea	dosname(pc),a1
	moveq	#0,d0
	jsr	exopenlibrary(a6)
	move.l	d0,dosbase(a5)

	bsr.s	do

	move.l	execbase(a5),a6
	move.l	dosbase(a5),a1
	jsr	excloselibrary(a6)
	move.l	intbase(a5),a1
	jsr	excloselibrary(a6)
	move.l	gfxbase(a5),a1
	jsr	excloselibrary(a6)
	adda	#$8000,a5
	move.l	a5,a1
	move.l	#workspace+$8000,d0
	jsr	exfreemem(a6)

nomem:	rts

do:	bsr	openstuff
	bsr	checkstuff
	beq	abort
	bsr	initstuff
	bsr	loadlevel

loop:	bsr	waitevent
process:	bsr	getevent
	beq.s	loop
	bsr	processevent
	bra.s	loop



abort:	bsr	closestuff
	rts

waitevent:	move.l	execbase(a5),a6
	move.l	uport(a5),a0
	jmp	exwaitport(a6)
getevent:	move.l	uport(a5),a0
	move.l	execbase(a5),a6
	jsr	exgetmsg(a6)
	tst.l	d0
	beq.s	noevent
	move.l	d0,a1
	move	im_class+2(a1),d2
	move	im_code(a1),d3
	move	im_qualifier(a1),d6
	moveq	#0,d4
	moveq	#0,d5
	move	im_mousex(a1),d4
	move	im_mousey(a1),d5
	jsr	exreplymsg(a6)
	moveq	#1,d0
noevent:	rts


openstuff:	move.l	intbase(a5),a6
	lea	newscreen(pc),a0
	jsr	intopenscreen(a6)
	move.l	d0,screen(a5)
	beq	badopen
	lea	newwindow(pc),a0
	move.l	d0,nw_screen(a0)
	jsr	intopenwindow(a6)
	move.l	d0,window(a5)
	beq	badopen
	move.l	#$20000,d0
	moveq	#memf_public,d1
	move.l	execbase(a5),a6
	jsr	exallocmem(a6)
	move.l	d0,array(a5)
	move.l	#$20*4096,d0
	moveq	#memf_chip,d1
	jsr	exallocmem(a6)
	move.l	d0,tiles(a5)
badopen:	rts

checkstuff:	tst.l	screen(a5)
	beq.s	checkbad
	tst.l	window(a5)
	beq.s	checkbad
	tst.l	tiles(a5)
	beq.s	checkbad
	tst.l	array(a5)
	beq.s	checkbad
	moveq	#1,d0
checkbad:	rts


closestuff:	move.l	intbase(a5),a6
	move.l	window(a5),d0
	beq.s	cs1
	move.l	d0,a0
	clr.l	window(a5)
	jsr	intclosewindow(a6)
cs1:	move.l	screen(a5),d0
	beq.s	cs2
	move.l	d0,a0
	clr.l	screen(a5)
	jsr	intclosescreen(a6)
cs2:	move.l	execbase(a5),a6
	move.l	array(a5),d0
	beq.s	cs3
	move.l	d0,a1
	move.l	#$20000,d0
	jsr	exfreemem(a6)
cs3:	move.l	tiles(a5),d0
	beq.s	cs4
	move.l	d0,a1
	move.l	#$20*4096,d0
	jsr	exfreemem(a6)
cs4:	rts

fillall:	lea	level(a5),a4
	lea	l_levels(a4),a0
	adda	l_floor(a4),a0
	move	#edge*edge,d0
	move	l_tile(a4),d1
fillalllp:	move.b	d1,(a0)+
	subq	#1,d0
	bne.s	fillalllp
	bra	showlevel

loadlevel:	lea	filename(a5),a0
	move.l	a0,d1
	move.l	#1005,d2
	move.l	dosbase(a5),a6
	jsr	dosopen(a6)
	move.l	d0,d4
	beq.s	noloadlevel
	lea	level(a5),a0
	move.l	a0,d2
	move.l	d4,d1
	move.l	#l_size+padding,d3
	jsr	dosread(a6)
	move.l	d0,levelsize(a5)
	move.l	d4,d1
	jsr	dosclose(a6)
;	lea	level+l_objects(a5),a0
;	moveq	#maxobjects,d0
;fixobj:	move	#-1,o_x(a0)
;	lea	o_size(a0),a0
;	subq	#1,d0
;	bne.s	fixobj
	lea	level+l_levels(a5),a0
	move	#edge*edge*5,d4
fw:	bsr	fixwall
	addq	#1,a0
	subq	#1,d4
	bne.s	fw
noloadlevel:	bsr	showlevel2
	bra	showlevel

savelevel:	lea	filename(a5),a0
	move.l	a0,d1
	move.l	#1006,d2
	move.l	dosbase(a5),a6
	jsr	dosopen(a6)
	move.l	d0,d4
	beq.s	nosavelevel
	lea	level(a5),a0
	move.l	a0,d2
	move.l	d4,d1
	move.l	levelsize(a5),d3
	jsr	doswrite(a6)
	move.l	d4,d1
	jsr	dosclose(a6)
nosavelevel:	rts


showlevel2:	lea	level(a5),a4
	lea	tilelist(pc),a3
	adda	l_tileoff(a4),a3
	move	#37,d5
	moveq	#8,d6
puttypes:	bsr	showsquare
	addq	#1,a3
	addi	#40*8*3,d5
	subq	#1,d6
	bne.s	puttypes

	lea	objlist(pc),a3
	adda	l_tileoff(a4),a3
	move	#34,d5
	moveq	#8,d6
	clr	d7
putobjs:	bsr	showobject
	addq	#1,a3
	addi	#40*8*3,d5
	subq	#1,d6
	bne.s	putobjs

	moveq	#31,d5
	moveq	#8,d6
	lea	level+l_objects(a5),a4
	move	#maxobjects,d6
	move	level+l_tileoff(a5),d7
	beq.s	sth2
sth:	tst.b	o_x(a4)
	bmi.s	nextth
	move.b	o_what(a4),d0
	cmpi.b	#characters,d0
	bcs.s	nextth
	cmpi.b	#endch,d0
	bcc.s	nextth
	subq	#1,d7
nextth:	lea	o_size(a4),a4
	subq	#1,d6
	beq.s	sth3
	tst	d7
	beq.s	sth2
	bra.s	sth
sth3:	moveq	#8,d7
	bra.s	fth
sth2:	moveq	#8,d7
pth:	tst.b	o_x(a4)
	bmi.s	nextth2
	move.b	o_what(a4),d0
	cmpi.b	#characters,d0
	bcs.s	nextth2
	cmpi.b	#endch,d0
	bcc.s	nextth2
	swap	d7
	clr	d7
	lea	o_what(a4),a3
	bsr	showobject
	addi	#40*8*3,d5
	swap	d7
	subq	#1,d7
	beq.s	eth
nextth2:	lea	o_size(a4),a4
	subq	#1,d6
	bne.s	pth
fth:	lea	minustwo(pc),a3
fthlp:	swap	d7
	clr	d7
	bsr	showobject
	addi	#40*8*3,d5
	swap	d7
	subq	#1,d7
	bne.s	fthlp

eth:


	moveq	#37,d5
	lea	tilelist(pc),a0
	lea	level(a5),a4
	move	l_tile(a4),d1
	bpl.s	d1ok
	lea	objlist(pc),a0
	subq	#3,d5
	move	l_obj(a4),d1
	bpl.s	d1ok
	subq	#3,d5
	move	l_guy(a4),d1
	sub	l_tileoff(a4),d1
	cmpi	#8,d1
	bcc.s	typenotseen
	mulu	#40*8*3,d1
	add	d1,d5
	bra.s	typesame
d1ok:	adda	l_tileoff(a4),a0
	moveq	#8,d0
comptypes:	cmp.b	(a0)+,d1
	beq.s	typesame
	addi	#40*8*3,d5
	subq	#1,d0
	bne.s	comptypes
	bra.s	typenotseen
typesame:	lea	objlist-1(pc),a3
	moveq	#1,d7
	bsr	showobject
typenotseen:	rts

showlevel:	lea	level(a5),a4
	tst	l_guy(a4)
	bpl	inventory
	move	l_xpos(a4),d4
	move	l_ypos(a4),d5
	moveq	#edge,d0
	mulu	d5,d0
	add	d4,d0
	add	l_floor(a4),d0
	lea	l_levels(a4),a3
	adda	d0,a3
	moveq	#0,d5
	moveq	#vy,d7
sly:	moveq	#vx,d6
slx:	bsr	showsquare
	addq	#1,a3
	addq	#3,d5
	subq	#1,d6
	bne.s	slx
	adda	#edge-vx,a3
	addi	#40*8*3-3*vx,d5
	subq	#1,d7
	bne.s	sly
	lea	l_objects(a4),a6
	move	#maxobjects,d6
solp:	clr	d4
	clr	d5
	move	o_floor(a6),d0
	cmp	l_floor(a4),d0
	bne.s	shownextobj
	move.b	o_x(a6),d4
	bmi.s	shownextobj
	move.b	o_what(a6),d0
	cmpi.b	#characters,d0
	bcs.s	sonorm
	cmpi.b	#endch,d0
	bcs.s	forceshow
sonorm:	tst.b	o_owner(a6)
	bne.s	shownextobj
forceshow:	move.b	o_y(a6),d5
	sub	l_xpos(a4),d4
	sub	l_ypos(a4),d5
	cmpi	#vx,d4
	bcc.s	shownextobj
	cmpi	#vy,d5
	bcc.s	shownextobj
	mulu	#3,d4
	mulu	#40*3*8,d5
	add	d4,d5
	lea	o_what(a6),a3
	moveq	#1,d7
	move.l	a6,-(a7)
	bsr	showobject
	move.l	(a7)+,a6
shownextobj:	lea	o_size(a6),a6
	subq	#1,d6
	bne.s	solp
	rts

;d0=guy #
;return a0=current guy
;or NZ if no guy
findguy:	lea	level+l_objects(a5),a0
	move	#maxobjects,d1
fglp:	tst.b	o_x(a0)
	bmi.s	fgnext
	move.b	o_what(a0),d2
	cmpi.b	#characters,d2
	bcs.s	fgnext
	cmpi.b	#endch,d2
	bcc.s	fgnext
	subq	#1,d0
	bcc.s	fgnext
	moveq	#0,d0
	bra.s	fgfound
fgnext:	lea	o_size(a0),a0
	subq	#1,d1
	bne.s	fglp
	moveq	#1,d0
fgfound:	rts



inventory:	move	level+l_guy(a5),d0
	bsr	findguy
	beq.s	aguy
	clr	d5
	moveq	#vx,d4
	moveq	#0,d6
	bra	fillout
aguy:	move.b	o_owner(a0),scratch+2(a5)
	lea	level+l_objects(a5),a4
	move	#maxobjects,scratch(a5)
	moveq	#0,d5
	moveq	#0,d7
	moveq	#vx,d4
	moveq	#0,d6
invlp:	tst.b	o_x(a4)
	bmi.s	invnext
	move.b	scratch+2(a5),d0
	cmp.b	o_owner(a4),d0
	bne.s	invnext
	move.b	o_what(a4),d0
	cmpi.b	#characters,d0
	bcs.s	invthis
	cmpi.b	#endch,d0
	bcs.s	invnext
invthis:	lea	o_what(a4),a3
	bsr	showobject
	addq	#1,d6
	addq	#3,d5
	subq	#1,d4
	bne.s	invnext
	moveq	#vx,d4
	addi	#24*40-3*vx,d5
invnext:	lea	o_size(a4),a4
	subq	#1,scratch(a5)
	bne.s	invlp
h:	bsr	fillout



	move	#vy/2*8*40*3,d5
	moveq	#0,d6
	lea	objlist(pc),a3
	moveq	#0,d7
	moveq	#vx,d4
iobjs:	bsr	showobject
	addq	#3,d5
	addq	#1,a3
	addq	#1,d6
	subq	#1,d4
	bne.s	not8
	moveq	#vx,d4
	addi	#24*40-3*vx,d5
not8:	cmpi	#characters,d6
	bcs.s	iobjs

fillout:	lea	minustwo(pc),a3
filloutlp:	bsr	showobject
	addq	#3,d5
	addq	#1,d6
	cmpi	#vx*vy/2,d6
	beq.s	filledout
	subq	#1,d4
	bne.s	filloutlp
	addi	#24*40-3*vx,d5
	moveq	#vx,d4
	bra.s	filloutlp
filledout:	rts



showobject:	moveq	#0,d0
	move.b	(a3),d0
	cmpi.b	#-2,d0
	bcs.s	notm1
	ext	d0
notm1:	add	d0,d0
	lea	objmap(pc),a0
	adda	d0,a0
	move	(a0),d0
	ror	#8,d0
	add.l	d0,d0
	move.l	array(a5),a2
	adda.l	d0,a2
	move	(a2),d0
	bsr.s	showo1
	move	2(a2),d0
	bsr.s	showo1
	move	4(a2),d0
	bsr.s	showo1
	addi	#8*40-3,d5
	move	512(a2),d0
	bsr.s	showo1
	move	514(a2),d0
	bsr.s	showo1
	move	516(a2),d0
	bsr.s	showo1
	addi	#8*40-3,d5
	move	1024(a2),d0
	bsr.s	showo1
	move	1026(a2),d0
	bsr.s	showo1
	move	1028(a2),d0
	bsr.s	showo1
	addi	#-2*8*40-3,d5
	rts
showo1:	andi.l	#$fff,d0
	lsl.l	#5,d0
	move.l	tiles(a5),a0
	adda.l	d0,a0
	move.l	a0,a1
	lea	maskff(pc),a6
	tst	d7
	beq.s	nomask
	lea	mask(a5),a6
	move.l	24(a0),d0
	or.l	16(a0),d0
	or.l	8(a0),d0
	or.l	(a0)+,d0
	move.l	d0,(a6)+
	move.l	24(a0),d0
	or.l	16(a0),d0
	or.l	8(a0),d0
	or.l	(a0)+,d0
	move.l	d0,(a6)+
	subq	#8,a0
	subq	#8,a6
nomask:	move.l	planes(a5),a1
	bsr.s	showoplane
	move.l	planes+4(a5),a1
	bsr.s	showoplane
	move.l	planes+8(a5),a1
	bsr.s	showoplane
	move.l	planes+12(a5),a1
	bsr.s	showoplane
	move.l	planes+16(a5),a1
	move.l	a6,a0
	bsr	showoplane
	addq	#1,d5
	rts
showoplane:	adda	d5,a1
	moveq	#8,d0
showoplanelp:	move.b	(a6)+,d1
	not.b	d1
	and.b	(a1),d1
	or.b	(a0)+,d1
	move.b	d1,(a1)
	adda	#40,a1
	subq	#1,d0
	bne.s	showoplanelp
	subq	#8,a6
	rts

showsquare:	moveq	#0,d0
	move.b	(a3),d0
	add	d0,d0
	lea	squaremap(pc),a0
	adda	d0,a0
	move	(a0),d0
	ror	#8,d0
	add.l	d0,d0
	move.l	array(a5),a2
	adda.l	d0,a2
	move	(a2),d0
	bsr.s	show1
	move	2(a2),d0
	bsr.s	show1
	move	4(a2),d0
	bsr.s	show1
	addi	#8*40-3,d5
	move	512(a2),d0
	bsr.s	show1
	move	514(a2),d0
	bsr.s	show1
	move	516(a2),d0
	bsr.s	show1
	addi	#8*40-3,d5
	move	1024(a2),d0
	bsr.s	show1
	move	1026(a2),d0
	bsr.s	show1
	move	1028(a2),d0
	bsr.s	show1
	addi	#-2*8*40-3,d5
	rts
show1:	andi.l	#$fff,d0
	lsl.l	#5,d0
	move.l	tiles(a5),a0
	adda.l	d0,a0
	move.l	planes(a5),a1
	bsr.s	showplane
	move.l	planes+4(a5),a1
	bsr.s	showplane
	move.l	planes+8(a5),a1
	bsr.s	showplane
	move.l	planes+12(a5),a1
	bsr.s	showplane
	move.l	planes+16(a5),a1
	lea	mask0(pc),a0
	bsr.s	showplane
	addq	#1,d5
	rts
showplane:	adda	d5,a1
	move.b	(a0)+,(a1)
	move.b	(a0)+,40(a1)
	move.b	(a0)+,80(a1)
	move.b	(a0)+,120(a1)
	move.b	(a0)+,160(a1)
	move.b	(a0)+,200(a1)
	move.b	(a0)+,240(a1)
	move.b	(a0)+,280(a1)
	rts





initstuff:	move.l	#l_size,levelsize(a5)
	move.l	window(a5),a0
	move.l	wd_userport(a0),uport(a5)
	move.l	screen(a5),a0
	lea	sc_bitmap+bm_planes(a0),a0
	lea	planes(a5),a1
	move.l	(a0)+,(a1)+
	move.l	(a0)+,(a1)+
	move.l	(a0)+,(a1)+
	move.l	(a0)+,(a1)+
	move.l	(a0)+,(a1)+
	move	#-1,button(a5)


	move.l	dosbase(a5),a6
	lea	arrayname(pc),a0
	move.l	a0,d1
	move.l	#1005,d2
	jsr	dosopen(a6)
	move.l	d0,d4
	beq	noarray
	move.l	d4,d1
	move.l	array(a5),d2
	move.l	#$20000,d3
	jsr	dosread(a6)
	move.l	d4,d1
	lea	colortable(a5),a0
	move.l	a0,d2
	move.l	#128,d3
	jsr	dosread(a6)
	move.l	d4,d1
	lea	tilenum(a5),a0
	move.l	a0,d2
	moveq	#2,d3
	jsr	dosread(a6)
	move	tilenum(a5),d3
	lsl.l	#5,d3
	move.l	d4,d1
	move.l	tiles(a5),d2
	jsr	dosread(a6)
	move.l	d4,d1
	jsr	dosclose(a6)
	move.l	gfxbase(a5),a6
	lea	colortable(a5),a1
	move.l	screen(a5),a0
	lea	sc_viewport(a0),a0
	moveq	#32,d0
	jsr	gfxloadrgb4(a6)
noarray:	rts

processevent:	lea	level(a5),a4
	cmpi	#rawkey,d2
	beq	arawkey
	cmpi	#mousebuttons,d2
	beq	amousebutton
	cmpi	#mousemove,d2
	beq	amousemove
	rts
arawkey:	cmpi	#$45,d3
	beq	anescape
	cmpi	#$4c,d3
	beq	scrollup
	cmpi	#$4f,d3
	beq	scrollleft
	cmpi	#$4d,d3
	beq	scrolldown
	cmpi	#$4e,d3
	beq	scrollright
	cmpi	#$0b,d3
	beq	downlevel
	cmpi	#$0c,d3
	beq	uplevel
	cmpi	#$21,d3
	beq	savelevel
	cmpi	#$28,d3
	beq	loadlevel
	cmpi	#$46,d3
	beq	typesleft
	cmpi	#$5f,d3
	beq	typesright
	andi	#3,d6
	beq.s	noshifts
	cmpi	#$23,d3
	beq	fillall
noshifts:	rts
anescape:	addq	#4,a7
	bra	abort
typesleft:
	tst	l_tileoff(a4)
	beq	ignore
	subq	#1,l_tileoff(a4)
	bra	showlevel2
typesright:
	cmpi	#numtypes-13,l_tileoff(a4)
	beq	ignore
	addq	#1,l_tileoff(a4)
	bra	showlevel2

uplevel:	lea	level(a5),a2
	cmpi	#4*edge*edge,l_floor(a2)
	beq	ignore
	addi	#edge*edge,l_floor(a2)
	bra.s	allscroll
downlevel:	lea	level(a5),a2
	tst	l_floor(a2)
	beq	ignore
	subi	#edge*edge,l_floor(a2)
	bra.s	allscroll
scrollup:	tst	l_ypos(a4)
	beq	ignore
	subq	#1,l_ypos(a4)
	bra	allscroll
scrollleft:	tst	l_xpos(a4)
	beq	ignore
	subq	#1,l_xpos(a4)
	bra	allscroll
scrolldown:	cmpi	#edge-8,l_ypos(a4)
	beq	ignore
	addq	#1,l_ypos(a4)
	bra	allscroll
scrollright:	cmpi	#edge-vx,l_xpos(a4)
	beq	ignore
	addq	#1,l_xpos(a4)
allscroll:	tst.b	button+1(a5)
	bmi	showlevel
	cmpi	#240,d4
	bcc	showlevel
	bra.s	amousemove

amousebutton:	move	d3,button(a5)
	st	clicked(a5)
	bra.s	aclick
amousemove:	clr.b	clicked(a5)
aclick:	move	button(a5),d0
	tst.b	d0
	bmi	ignore
	cmpi	#296,d4
	bcc	changetype
	cmpi	#296-24,d4
	bcc	changeotype
	cmpi	#296-48,d4
	bcc	changeguy
	cmpi	#vx*24,d4
	bcc	ignore
	cmpi	#vy*24,d5
	bcc	ignore
	cmpi	#iecode_lbutton,d0
	beq	paint
	clr	d0
	bra	paintany
ignore:	rts
;	cmpi	#iecode_lbutton,d3
;	beq	lbd
;	rts
;lbd:	cmpi	#24,d5
;	bcs	changetype
;	cmpi	#32,d5
;	bcc	paint
;	rts

pickguy:	add	l_xpos(a4),d4
	add	l_ypos(a4),d5
	moveq	#-1,d7
	lea	level+l_objects(a5),a0
	move	#maxobjects,d0
pglp:	tst.b	o_x(a0)
	bmi.s	pgnext
	tst.b	o_owner(a0)
	beq.s	pgnext
	move.b	o_what(a0),d1
	cmpi.b	#characters,d1
	bcs.s	pgnext
	cmpi.b	#endch,d1
	bcc.s	pgnext
	addq.l	#1,d7
	cmp.b	o_x(a0),d4
	bne.s	pgnext
	cmp.b	o_y(a0),d5
	bne.s	pgnext
	move	d7,d5
	bra.s	newguy

pgnext:	lea	o_size(a0),a0
	subq	#1,d0
	bne.s	pglp
	rts

changeguy:	divu	#24,d5
	add	l_tileoff(a4),d5
	cmp	l_guy(a4),d5
	beq	ignore

	move	d5,d0
	bsr	findguy
	bne	ignore
newguy:	move	d5,l_guy(a4)
	move	l_tile(a4),d0
	move	l_obj(a4),d1
	move	d0,d2
	and	d1,d2
	not	d2
	beq.s	nosavewhich
	move	d0,l_oldtile(a4)
	move	d1,l_oldobj(a4)
	move	#-1,l_tile(a4)
	move	#-1,l_obj(a4)
nosavewhich:	bsr	showlevel2
	bra	showlevel

resetold:	move	l_oldtile(a4),l_tile(a4)
	move	l_oldobj(a4),l_obj(a4)
	move	#-1,l_guy(a4)
	move	#-1,button(a5)
	bsr	showlevel2
	bra	showlevel

changeotype:	divu	#24,d5
	add	l_tileoff(a4),d5
	lea	objlist(pc),a0
	move.b	0(a0,d5),d4
	cmp	l_obj(a4),d4
	beq	ignore
	move	d4,l_obj(a4)
	move	#-1,l_tile(a4)
	move	#-1,l_guy(a4)
	bsr	showlevel2
	bra	showlevel
changetype:	divu	#24,d5
	add	l_tileoff(a4),d5
	lea	tilelist(pc),a0
	move.b	0(a0,d5),d4
	cmp	l_tile(a4),d4
	beq	ignore
	move	d4,l_tile(a4)
	move	#-1,l_obj(a4)
	move	#-1,l_guy(a4)
	bsr	showlevel2
	bra	showlevel

paint:	move	l_tile(a4),d0
paintany:	divu	#24,d4
	divu	#24,d5
	tst	l_guy(a4)
	bpl	givetake
	andi	#3,d6
	bne	pickguy
	add	l_xpos(a4),d4
	add	l_ypos(a4),d5
	tst	l_tile(a4)
	bpl	notobjpaint
	move	d0,d6
	beq.s	eraseobject
	move	l_obj(a4),d6
eraseobject:	lea	l_objects(a4),a0
	move	#maxobjects,d0
	suba.l	a1,a1
compobj:	tst.b	o_x(a0)
	bpl.s	notfreeobj
	move.l	a0,a1
notfreeobj:	move	l_floor(a4),d1
	cmp	o_floor(a0),d1
	bne.s	nextcompobj
	cmp.b	o_x(a0),d4
	bne.s	nextcompobj
	cmp.b	o_y(a0),d5
	bne.s	nextcompobj
	cmp.b	o_what(a0),d6
	beq	ignore
	bsr	checkkill
	bra.s	gotobj
nextcompobj:	lea	o_size(a0),a0
	subq	#1,d0
	bne.s	compobj
	move.l	a1,d0
	beq	ignore
	move.l	a1,a0
gotobj:	tst	d6
	bne.s	noeraseobj
	tst.b	o_x(a0)
	bmi	ignore
	move.b	#-1,o_x(a0)
	bra.s	iseraseobj
noeraseobj:	move.b	d4,o_x(a0)
	move.b	d5,o_y(a0)
	move.b	d6,o_what(a0)
	move	l_floor(a4),o_floor(a0)
iseraseobj:	clr.b	o_owner(a0)
	move.b	o_what(a0),d0
	cmpi.b	#characters,d0
	bcs	showlevel
	cmpi.b	#endch,d0
	bcc	showlevel
	clr.b	o_owner(a0)
	move.l	a0,a2
	lea	scratch(a5),a0
	move.l	a0,a1
	moveq	#0,d0
cs:	clr	(a1)+
	subq.b	#2,d0
	bne.s	cs
	st	(a0)
	lea	level+l_objects(a5),a1
	move	#maxobjects,d1
mark:	tst.b	o_x(a1)
	bmi.s	marknext
	move.b	o_what(a1),d0
	cmpi.b	#characters,d0
	bcs.s	marknext
	cmpi.b	#endch,d0
	bcc.s	marknext
	clr	d0
	move.b	o_owner(a1),d0
	st	0(a0,d0)
marknext:	lea	o_size(a1),a1
	subq	#1,d1
	bne.s	mark
	move.l	a0,d0
findunmarked:	tst.b	(a0)+
	bne.s	findunmarked
	sub.l	a0,d0
	not	d0
	move.b	d0,o_owner(a2)
	bsr	showlevel2
	bra	showlevel

checkkill:	cmpi.b	#characters,o_what(a0)
	bcs.s	nokill
	cmpi.b	#endch,o_what(a0)
	bcc.s	nokill
	movem.l	a0/d0/d1,-(a7)
	move.b	o_owner(a0),d1
	lea	level+l_objects(a5),a0
	move	#maxobjects,d0
deletestuff:	tst.b	o_x(a0)
	bmi.s	deletenext
	cmp.b	o_owner(a0),d1
	bne.s	deletenext
	move.b	#-1,o_x(a0)
deletenext:	lea	o_size(a0),a0
	subq	#1,d0
	bne.s	deletestuff
	movem.l	(a7)+,a0/d0/d1
	clr.b	o_x(a0)
nokill:	rts


givetake:	tst.b	clicked(a5)
	beq	ignore
	cmpi	#iecode_rbutton,button(a5)
	beq	resetold
	move	l_guy(a4),d0
	bsr	findguy
	cmpi	#4,d5
	bcs.s	take
	subq	#4,d5
	mulu	#vx,d5
	add	d5,d4
	cmpi	#characters,d4
	bcc	ignore
	lea	level+l_objects(a5),a1
	move	#maxobjects,d1
ffobj:	tst.b	o_x(a1)
	bmi.s	ffdone
	lea	o_size(a1),a1
	subq	#1,d1
	bne.s	ffobj
	bra	ignore

ffdone:	clr.b	o_x(a1)
	clr.b	o_y(a1)
	move.b	o_owner(a0),o_owner(a1)
	lea	objlist(pc),a2
	adda	d4,a2
	move.b	(a2),o_what(a1)
	bra	showlevel

take:	mulu	#vx,d5
	add	d5,d4
	lea	level+l_objects(a5),a1
	move.b	o_owner(a0),d2
	move	#maxobjects,d3
findd4:	cmpa.l	a0,a1
	beq.s	fd4next
	tst.b	o_x(a1)
	bmi.s	fd4next
	cmp.b	o_owner(a1),d2
	bne.s	fd4next
	subq	#1,d4
	bcc.s	fd4next
	st	o_x(a1)
	bra	showlevel
fd4next:	lea	o_size(a1),a1
	subq	#1,d3
	bne.s	findd4
	rts


notobjpaint:	mulu	#edge,d5
	add	d5,d4
	add	l_floor(a4),d4
	lea	l_levels(a4),a0
	adda	d4,a0
	bsr.s	fixwall2
;	tst.b	d0
;	bpl.s	notwall
;	cmpi.b	#$c0,d0
;	bcc.s	notwall
;	bsr	compwall
;notwall:
	cmp.b	(a0),d0
	beq	ignore
	move.b	d0,(a0)
	lea	-edge(a0),a0
	bsr.s	fixwall
	lea	edge+1(a0),a0
	bsr.s	fixwall
	lea	edge-1(a0),a0
	bsr.s	fixwall
	lea	-edge-1(a0),a0
	bsr.s	fixwall
	bra	showlevel
fixwall:	move.b	(a0),d0
	bsr.s	fixwall2
	move.b	d0,(a0)
	rts
fixwall2:	tst.b	d0
	bpl	ignore
	cmpi.b	#$c0,d0
	bcc	ignore
	andi	#$f0,d0
compwall:	move	d0,d1
	clr	d2
	move.b	-edge(a0),d3
	bsr.s	wallbit
	move.b	1(a0),d3
	bsr.s	wallbit
	move.b	edge(a0),d3
	bsr.s	wallbit
	move.b	-1(a0),d3
wallbit:	tst.b	d3
	beq.s	nosetwallbit
	cmpi.b	#5,d3
	bcs.s	setwallbit
	andi	#$f0,d3
	eor	d1,d3
	bne.s	nosetwallbit
setwallbit:	bset	d2,d0
nosetwallbit:	addq	#1,d2
	rts





colors:	dc	$000,$f00,$0f0,$ff0,$00f,$f0f,$0ff,$fff
	dc	$fff,$0ff,$f0f,$00f,$ff0,$0f0,$f00,$000
	dc	$000,$fff,$fff,$fff,$000,$000,$000,$000
	dc	$000,$000,$000,$000,$000,$000,$000,$000


newscreen:	dc	0,0,320,200,5	; left,top,width,height,depth
	dc.b	1,0		; pens
	dc	0		; viewmodes
	dc	customscreen	; type
	dc.l	0		; font
	dc.l	0		; title
	dc.l	0		; gadgets
	dc.l	0		; custombitmap
newwindow:	dc	0,0
	dc	320,200
	dc.b	30,31
	dc.l	MOUSEBUTTONS+MOUSEMOVE+CLOSEWINDOW+RAWKEY+MENUPICK	;+MENUVERIFY
	dc.l	REPORTMOUSE+BORDERLESS+ACTIVATE+NOCAREREFRESH+rmbtrap
	dc.l	0
	dc.l	0
	dc.l	0
	dc.l	0
	dc.l	0
	dc	0,0
	dc	0,0
	dc	CUSTOMSCREEN
tilelist:	dc.b	-1
	dc.b	$00,$80,$90,$a0,$b0,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f
	dc.b	$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f
	dc.b	$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f
	dc.b	$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f
	dc.b	$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f
	dc.b	$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f
numtypes:	equ	*-tilelist

	cnop	0,2
squaremap:	dc.b	3,3
	dc.b	6,3	thin doorway, left and right connect
	dc.b	12,3	thin doorway, up and down connect
	dc.b	12,0	fat doorway, left and right
	dc.b	15,0	fat doorway, up and down

	dc.b	12,21	rocky dirt
	dc.b	6,15	dirt, some rocks
	dc.b	3,15	dirt,fewer rocks
	dc.b	0,15	dirt,no rocks

	dc.b	39,15	1 1/2 small trees
	dc.b	39,9	two small trees
	dc.b	39,12	two medium trees
	dc.b	36,9	4 medium trees
	dc.b	33,18	2 big trees, two small
	dc.b	36,15	dense trees
	dc.b	30,18	1 BIG tree

	dc.b	15,12	water1
	dc.b	18,12	water2
	dc.b	21,12	water ul
	dc.b	24,12	water ur
	dc.b	27,12	water ll
	dc.b	30,12	water lr
	dc.b	24,15	water top
	dc.b	27,15	water right
	dc.b	30,15	water bottom
	dc.b	33,15	water left

	dc.b	33,0	left gasoline
	dc.b	36,0	middle gasoline
	dc.b	39,0	right gasoline

	dc.b	15,6	brown entry square
	dc.b	24,6	blue entry square
	dc.b	30,6	grey entry square

	dc.b	9,15	elevator up
	dc.b	12,15	elevator down

	dc.b	30,21	white rapid water
	dc.b	24,21	white terrain
	dc.b	0,12	rock circle ll
	dc.b	3,12	rock circle lr
	dc.b	6,12	rock circle ul
	dc.b	9,12	rock circle ur

	dc.b	9,3	drone
	dc.b	33,9	energy thing
	dc.b	36,6	keyboard and monitor
	dc.b	33,3	tape recorder
	dc.b	27,3	gruel empty
	dc.b	21,3	gruel full
	dc.b	18,6	desk
	dc.b	12,6	metal box, long
	dc.b	9,9	terminal, tall
	dc.b	3,9	looks like a transformer
	dc.b	6,6	bed

	dc.b	6,6	;open doors
	dc.b	6,6
	dc.b	6,6
	dc.b	6,6

	ds.b	256-(*-squaremap)
	dc.b	0,30,3,30,6,30,9,30
	dc.b	12,30,15,30,18,30,21,30
	dc.b	24,30,27,30,30,30,33,30
	dc.b	36,30,39,30,42,30,45,30

	dc.b	0,27,3,27,6,27,9,27
	dc.b	12,27,15,27,18,27,21,27
	dc.b	24,27,27,27,30,27,33,27
	dc.b	36,27,39,27,42,27,45,27

	dc.b	0,24,3,24,6,24,9,24
	dc.b	12,24,15,24,18,24,21,24
	dc.b	24,24,27,24,30,24,33,24
	dc.b	36,24,39,24,42,24,45,24

	dc.b	0,33,3,33,6,33,9,33
	dc.b	12,33,15,33,18,33,21,33
	dc.b	24,33,27,33,30,33,33,33
	dc.b	36,33,39,33,42,33,45,33

	dc.b	-1
objlist:	dc.b	0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
	dc.b	16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31
	dc.b	32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47
	dc.b	48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63

	cnop	0,2
	dc.b	0,0
	dc.b	15,42
objmap:	dc.b	15,36
	dc.b	18,36
	dc.b	21,36
	dc.b	0,39
	dc.b	3,39
	dc.b	6,39
	dc.b	9,39
	dc.b	12,39
	dc.b	15,39
	dc.b	18,39
	dc.b	21,39
	dc.b	0,42
	dc.b	3,42
	dc.b	6,42
	dc.b	9,42
	dc.b	12,42
	dc.b	21,42
	dc.b	0,45
	dc.b	3,45
	dc.b	6,45
	dc.b	9,45
	dc.b	12,45
	dc.b	0,0
	dc.b	0,0
	dc.b	0,0
	dc.b	0,0
	dc.b	0,0
	dc.b	0,0
	dc.b	0,0
	dc.b	0,0

characters:	equ	(*-objmap)/2
	dc.b	0,48
	dc.b	0,51
	dc.b	0,54
	dc.b	24,36
	dc.b	24,39
	dc.b	24,45
	dc.b	24,48
	dc.b	24,51
	dc.b	24,54
	dc.b	24,60
endch:	equ	(*-objmap)/2

maskff:	dc.l	-1,-1
mask0:	dc.l	0,0
minustwo:	dc.b	-2

dosname:	dc.b	'dos.library',0
intname:	dc.b	'intuition.library',0
gfxname:	dc.b	'graphics.library',0
arrayname:	dc.b	'array',0
