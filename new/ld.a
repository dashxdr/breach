;#test	ram:test /real/aliens.b2s ram:out
;#end
;this program takes a breach 2 saved game file and
;dumps it


buffersize:	equ	512

exopenlibrary:	equ	$fffffdd8
excloselibrary:	equ	$fffffe62
dosopen:	equ	$ffffffe2
dosclose:	equ	$ffffffdc
dosread:	equ	$ffffffd6
doswrite:	equ	$ffffffd0
exfreemem:	equ	-$d2
exallocmem:	equ	-$c6
memf_public:	equ	1

numobj:	equ	60
numopp:	equ	60

dbyte:	macro
	bsr	abyte
	dc.b	'\1 =',0
	cnop	0,2
	endm
dlong:	macro
	bsr	along
	dc.b	'\1 =',0
	cnop	0,2
	endm
dword:	macro
	bsr	aword
	dc.b	'\1 =',0
	cnop	0,2
	endm
dtext:	macro
	moveq	#\2,d4
	bsr	atext
	dc.b	'\1 =',0
	cnop	0,2
	endm



;object
	init	0
	mds	obj_type,1
	mds	obj_held,1
	mds	obj_itext,30
	mds	obj_x,1
	mds	obj_y,1
	mds	obj_level,1
	mds	obj_pad,1
	label	obj_size
;opponent
	init	0
	mds	opp_type,2
	mds	opp_health,2
	mds	opp_vitality,1
	mds	opp_encumbrance,1
	mds	opp_basemove,1
	mds	opp_bonusmove,1
	mds	opp_armor,1
	mds	opp_gun,1
	mds	opp_psi,1
	mds	opp_shoot,1
	mds	opp_x,1
	mds	opp_y,1
	mds	opp_level,1
	mds	opp_facing,1
	label	opp_size
;marine
	init	0
	mds	mar_name,20
	mds	mar_class,2
	mds	mar_condition,2
	mds	mar_vitality,2
	mds	mar_encumbrance,2
	mds	mar_maxenc,2
	mds	mar_basemove,2
	mds	mar_bonusmove,2
	mds	mar_shoot,2
	mds	mar_crack,2
	mds	mar_detect,2
	mds	mar_armor,2
	mds	mar_gun,2
	mds	mar_inventory,16
	mds	mar_x,2
	mds	mar_y,2
	mds	mar_level,2
	mds	mar_facing,2
	mds	mar_psi,2
	mds	mar_ammo,2
	label	mar_size

;epoint
	init	0
	mds	ep_x,2
	mds	ep_y,2
	mds	ep_level,2
	label	ep_size
;tpstru
	init	0
	mds	tp_x,2
	mds	tp_y,2
	mds	tp_level,2
	mds	tp_tox,2
	mds	tp_toy,2
	mds	tp_tolevel,2
	label	tp_size
;ttstru
	init	0
	mds	tt_x,2
	mds	tt_y,2
	mds	tt_level,2
	mds	tt_itext,40
	mds	tt_read,2
	label	tt_size

;quest
	init	0
	mds	q_map,5*50*50
	mds	q_vis,50*50
	mds	q_objstru,numobj*obj_size
	mds	q_oppstru,numopp*opp_size
	mds	q_marstru,mar_size*10
	mds	q_tpstru,tp_size*10
	mds	q_ttstru,tt_size*20
	mds	q_pentry,ep_size
	mds	q_pexit,ep_size
	mds	q_brieftext,540
	mds	q_brieflen,4
	mds	q_timelimit,4
	mds	q_killpercent,2
	mds	q_occupynumber,2
	mds	q_vcond,2
	mds	q_battles,2
	mds	q_victories,2
	mds	q_wartime,4
	mds	q_kills,2
	mds	q_lost,2
	mds	q_slname,253
	mds	q_skill,2
	mds	q_slshots,2
	mds	q_slcracks,2
	mds	q_sldetects,2
	mds	q_slkills,2
	mds	q_chain,40
	label	q_size


	init	0
	mds	pointer,4
	mds	length,4
	mds	ihand,4
	mds	ohand,4
	mds	ibuff,buffersize
	mds	icount,2
	mds	ipoint,4
	mds	obuff,buffersize
	mds	ocount,2
	mds	opoint,4
	mds	xpos,2
	mds	word1,64
	mds	word2,64
	mds	xlate,8
	mds	spsave,4
	mds	dbuff,12
	mds	level,26000
	label	workspace

	move.l	a0,a2
	move.l	d0,d2
	move.l	#workspace,d0
	move.l	#memf_public,d1
	move.l	4.w,a6
	jsr	exallocmem(a6)
	tst.l	d0
	beq.s	nomem
	move.l	d0,a5

	move.l	a2,pointer(a5)
	move.l	d2,length(a5)

	move.l	4.w,a6
	lea	dosname(pc),a1
	moveq	#0,d0
	jsr	exopenlibrary(a6)
	move.l	d0,a6
	bsr.s	fix
	move.l	a6,a1
	move.l	4.w,a6
	jsr	excloselibrary(a6)
	move.l	a5,a1
	move.l	#workspace,d0
	jsr	exfreemem(a6)
nomem:	moveq	#0,d0
	rts

fix:	move.l	pointer(a5),a4
	lea	word1(a5),a0
	bsr	token
	lea	word2(a5),a0
	bsr	token
	lea	word1(a5),a0
	move.l	a0,d1
	move.l	#1005,d2
	jsr	dosopen(a6)
	move.l	d0,ihand(a5)
	beq	exit
	lea	word2(a5),a0
	move.l	a0,d1
	move.l	#1006,d2
	jsr	dosopen(a6)
	move.l	d0,ohand(a5)
	beq	exit2
	bsr	init
	move.l	a7,spsave(a5)
	lea	level(a5),a4
	moveq	#21,d4
toss:	bsr	ci
	subq	#1,d4
	bne.s	toss
	moveq	#0,d4
fix1:	bsr	ci
	cmpi.b	#7,d0
	beq.s	is7
	lea	xlate(a5),a0
	ext	d0
	move.b	d4,0(a0,d0)
is7:	addq.b	#1,d4
	bne.s	fix1
	moveq	#0,d7
fixo:	moveq	#0,d5
fix2:	bsr	getbit
	bcs.s	exitf2
	addq	#1,d5
	cmpi.b	#7,d5
	bne.s	fix2
	bsr	getbyte
	bsr	cox
	bra.s	fixo
exitf2:	lea	xlate(a5),a0
	move.b	0(a0,d5),d0
	bsr	cox
	bra.s	fixo
cox:	move.b	d0,(a4)+
	rts


getbyte:	moveq	#8,d4
getbytelp:	bsr	getbit
	roxr.b	#1,d1
	subq	#1,d4
	bne.s	getbytelp
	move.b	d1,d0
	rts

getbit:	subq	#1,d7
	bcc.s	gotbit
	bsr	ci
	move.b	d0,d6
	moveq	#7,d7
gotbit:	roxr.b	#1,d6
	rts
closeupshop:	move.l	spsave(a5),a7
;level has level in it

	lea	level+q_objstru(a5),a4
	moveq	#numobj,d7
objout:	bsr	doobject
	subq	#1,d7
	bne.s	objout

	moveq	#numopp,d7
oppout:	bsr	doopponent
	subq	#1,d7
	bne.s	oppout

	moveq	#10,d7
marout:	bsr	domarine
	subq	#1,d7
	bne.s	marout

	bsr	cr
	lea	level+q_timelimit(a5),a4
	dlong	TimeLimit
	dword	KillPercent
	dword	Occupynumber
	dbyte	Vcond1
	dbyte	Vcond2
	dbyte	Vcond3
	dbyte	Vcond4
	dbyte	Vcond5
	dbyte	Vcond6
	dbyte	Vcond7
	addq	#1,a4
	dword	battles
	dword	victories
	dword	wartime





	bsr	flush
	move.l	ohand(a5),d1
	jsr	dosclose(a6)
exit2:	move.l	ihand(a5),d1
	jsr	dosclose(a6)
exit:	rts

domarine:	bsr	cr
	dtext	mar_name,20
	dword	mar_class
	dword	mar_condition
	dword	mar_vitality
	dword	mar_encumbrance
	dword	mar_maxenc
	dword	mar_basemove
	dword	mar_bonusmove
	dword	mar_shoot
	dword	mar_crack
	dword	mar_detect
	dword	mar_armor
	dword	mar_gun
	dbyte	mar_inventory1
	dbyte	mar_inventory2
	dbyte	mar_inventory3
	dbyte	mar_inventory4
	dbyte	mar_inventory5
	dbyte	mar_inventory6
	dbyte	mar_inventory7
	dbyte	mar_inventory8
	dbyte	mar_inventory9
	dbyte	mar_inventory10
	dbyte	mar_inventory11
	dbyte	mar_inventory12
	dbyte	mar_inventory13
	dbyte	mar_inventory14
	dbyte	mar_inventory15
	addq	#1,a4
	dword	mar_x
	dword	mar_y
	dword	mar_level
	dword	mar_facing
	dbyte	mar_psi
	addq	#1,a4
	dword	mar_ammo
	rts


	rts
doopponent:	bsr	cr
	dbyte	opp_type
	addq	#1,a4
	dword	opp_health
	dbyte	opp_vitality
	dbyte	opp_encumbrance
	dbyte	opp_basemove
	dbyte	opp_bonusmove
	dbyte	opp_armor
	dbyte	opp_gun
	dbyte	opp_psi
	dbyte	opp_shoot
	dbyte	opp_x
	dbyte	opp_y
	dbyte	opp_level
	dbyte	opp_facing


;	bsr	abyte
;	dc.b	'opp_type =',0
;	cnop	0,2

;	addq	#1,a4
;	bsr	aword
;	dc.b	'opp_health =',0
;	cnop	0,2
;
;	bsr	abyte
;	dc.b	'opp_vitality =',0
;	cnop	0,2
;
;	bsr	abyte
;	dc.b	'opp_encumbrance =',0
;	cnop	0,2
;
;	bsr	abyte
;	dc.b	'opp_basemove =',0
;	cnop	0,2
;
;	bsr	abyte
;	dc.b	'opp_bonusmove =',0
;	cnop	0,2
;
;	bsr	abyte
;	dc.b	'opp_armor =',0
;	cnop	0,2
;
;	bsr	abyte
;	dc.b	'opp_gun =',0
;	cnop	0,2
;
;	bsr	abyte
;	dc.b	'opp_psi =',0
;	cnop	0,2


	rts

noobject:	lea	obj_size(a4),a4
	rts
doobject:
;	tst.b	obj_held(a4)
;	bmi.s	noobject
	bsr	cr
	bsr	abyte
	dc.b	'obj_type =',0
	cnop	0,2

	bsr	abyte
	dc.b	'obj_held =',0
	cnop	0,2

	moveq	#30,d4
	bsr	atext
	dc.b	'obj_itext =',0
	cnop	0,2

	bsr	abyte
	dc.b	'obj_x =',0
	cnop	0,2

	bsr	abyte
	dc.b	'obj_y =',0
	cnop	0,2

	bsr	abyte
	dc.b	'obj_level =',0
	cnop	0,2

	addq	#1,a4
	rts
along:	bsr	string
	move.l	(a4)+,d2
	bsr	deco
	bra	cr
aword:	bsr	string
	moveq	#0,d2
	move	(a4)+,d2
	bsr	deco
	bra	cr
abyte:	bsr	string
	moveq	#0,d2
	move.b	(a4)+,d2
	bsr	deco
	bra	cr
atext:	bsr	string
atextlp:	move.b	(a4)+,d0
	andi	#$7f,d0
	cmpi	#$20,d0
	bcc.s	d0ok
	moveq	#'.',d0
d0ok:	bsr	co
	subq	#1,d4
	bne.s	atextlp
	bra	cr
string:	move.l	4(a7),a2
strlp:	move.b	(a2)+,d0
	beq.s	strdone
	bsr	co
	bra.s	strlp
strdone:	addq	#1,a2
	move.l	a2,4(a7)
	andi	#$fffe,6(a7)
	rts

;d2=num
deco:	lea	dbuff+8(a5),a1
	clr.b	-(a1)
decolp:	divu	#10,d2
	swap	d2
	addi.b	#'0',d2
	move.b	d2,-(a1)
	clr	d2
	swap	d2
	bne.s	decolp
decolp2:	move.b	(a1)+,d0
	beq.s	decodone
	bsr	co
	bra.s	decolp2
decodone:	rts



cr:	moveq	#10,d0
	bra	co
hexout:	move	d0,d1
	ror.b	#4,d0
	bsr.s	digit
	move	d1,d0
digit:	andi	#$f,d0
	move.b	digits(pc,d0),d0
	bra	co
digits:	dc.b	'0123456789ABCDEF'
hexcomp:	moveq	#0,d0
hexcomplp:	move.b	(a0)+,d1
	subi.b	#'0',d1
	bcs.s	hexcompdone
	cmpi.b	#10,d1
	bcs.s	decdigit
	subi.b	#'a'-'0'-10,d1
	cmpi.b	#10,d1
	bcs.s	hexcompdone
	cmpi.b	#16,d1
	bcc.s	hexcompdone
decdigit:	lsl.l	#4,d0
	or.b	d1,d0
	bra.s	hexcomplp
hexcompdone:	rts

init:	lea	obuff(a5),a0
	move.l	a0,opoint(a5)
	clr	ocount(a5)
	clr	icount(a5)
	rts
ci4:	bsr.s	ci2
	swap	d0
ci2:	bsr.s	ci
	rol	#8,d0
ci:	tst	icount(a5)
	bne.s	stillmorein
	movem.l	d0-d3,-(a7)
	move.l	ihand(a5),d1
	lea	ibuff(a5),a0
	move.l	a0,ipoint(a5)
	move.l	a0,d2
	move.l	#buffersize,d3
	jsr	dosread(a6)
	move	d0,icount(a5)
	beq.s	exitci
	movem.l	(a7)+,d0-d3
stillmorein:	subq	#1,icount(a5)
	move.l	ipoint(a5),a0
	move.b	(a0)+,d0
	move.l	a0,ipoint(a5)
	rts
exitci:	movem.l	(a7)+,d0-d3
	bra	closeupshop
co4:	swap	d0
	bsr.s	co2
	swap	d0
co2:	rol	#8,d0
	bsr.s	co
	rol	#8,d0
co:	cmpi	#buffersize,ocount(a5)
	bne.s	stillnotfull
	bsr.s	flush
stillnotfull:	move.l	opoint(a5),a0
	move.b	d0,(a0)+
	move.l	a0,opoint(a5)
	addq	#1,ocount(a5)
	rts

flush:	movem.l	d0-d3/a1,-(a7)
	move.l	ohand(a5),d1
	lea	obuff(a5),a0
	move.l	a0,opoint(a5)
	move.l	a0,d2
	move	ocount(a5),d3
	clr	ocount(a5)
	ext.l	d3
	jsr	doswrite(a6)
	movem.l	(a7)+,d0-d3/a1
	rts

;a4=point,store at a0
token:	move.b	(a4)+,d0
	cmpi.b	#' ',d0
	beq.s	token
	cmpi.b	#9,d0
	beq.s	token
	subq	#1,a4
	moveq	#60,d2
tokenlp:	move.b	(a4)+,d0
	beq.s	tokendone
	cmpi.b	#' ',d0
	beq.s	tokendone
	cmpi.b	#9,d0
	beq.s	tokendone
	cmpi.b	#10,d0
	beq.s	tokendone
	subq	#1,d2
	bmi.s	tokenlp
	move.b	d0,(a0)+
	bra.s	tokenlp
tokendone:	clr.b	(a0)+
	subq	#1,a4
	rts
messagelp:	bsr	co
message:	move.b	(a2)+,d0
	bne.s	messagelp
	rts

dosname:	dc.b	'dos.library',0
