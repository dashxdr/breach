;this program does the shrinking on a file described in the README file.
;use 1> shrink INFILE OUTFILE


buffersize:	equ	512

edge:	equ	50
brieflen:	equ	540
maxobjects:	equ	150

maxobjectsin:	equ	150
;object
	init	0
	byte	o_x
	byte	o_y
	byte	o_owner	;id
	byte	o_what
	word	o_floor
	label	o_size
;transporter
	init	0
	byte	tp_x
	byte	tp_y
	word	tp_floor
	byte	tp_tox
	byte	tp_toy
	word	tp_tofloor
	label	tp_size

	init	0
	struct	l_levels,edge*edge*5
	word	l_floor
	word	l_xpos
	word	l_ypos
	word	l_tileoff
	word	l_tile
	word	l_obj
	word	l_guy
	mds	l_extra,16
	struct	l_objects,maxobjectsin*o_size
	struct	l_transporters,10*tp_size
	struct	l_brief,brieflen
	mds	l_vcond,1
	mds	l_killpercent,1
	mds	l_timelimit,2
	mds	l_occupynumber,2
	label	l_size


	init	0
	mds	pointer,4
	mds	length,4
	mds	ihand,4
	mds	ohand,4
	mds	ibuff,buffersize
	mds	icount,2
	mds	ipoint,4
	mds	obuff,buffersize
	mds	ocount,2
	mds	opoint,4
	mds	xpos,2
	mds	word1,64
	mds	word2,64
	mds	store,l_size
	label	workspace

	move.l	a0,a2
	move.l	d0,d2
	move.l	#workspace,d0
	moveq	#memf_public,d1
	move.l	4.w,a6
	jsr	exallocmem(a6)
	tst.l	d0
	beq.s	nomem
	move.l	d0,a5

	move.l	a2,pointer(a5)
	move.l	d2,length(a5)

	move.l	4.w,a6
	lea	dosname(pc),a1
	moveq	#0,d0
	jsr	exopenlibrary(a6)
	move.l	d0,a6
	bsr.s	fix
	move.l	a6,a1
	move.l	4.w,a6
	jsr	excloselibrary(a6)
	move.l	a5,a1
	move.l	#workspace,d0
	jsr	exfreemem(a6)
nomem:	moveq	#0,d0
	rts

fix:	move.l	pointer(a5),a4
	lea	word1(a5),a0
	bsr	token
	lea	word2(a5),a0
	bsr	token
	lea	word1(a5),a0
	move.l	a0,d1
	move.l	#1005,d2
	jsr	dosopen(a6)
	move.l	d0,ihand(a5)
	beq	exit
	lea	word2(a5),a0
	move.l	a0,d1
	move.l	#1006,d2
	jsr	dosopen(a6)
	move.l	d0,ohand(a5)
	beq	exit2
	bsr	init

	move	#l_size,d4
	lea	store(a5),a4
f1:	bsr	ci
	move.b	d0,(a4)+
	subq	#1,d4
	bne.s	f1

;	lea	store+l_floor(a5),a2
;	move	#l_objects-l_floor,d2
;	bsr	send
	lea	store+l_brief(a5),a2
	move	#l_size-l_brief,d2
	bsr	send

	lea	store+l_objects(a5),a2
	move	#maxobjects,d2
	moveq	#0,d3
ocnt:	tst.b	o_x(a2)
	bmi.s	ocntnext
	addq	#1,d3
ocntnext:	lea	o_size(a2),a2
	subq	#1,d2
	bne.s	ocnt
	move	d3,d0
	ror	#8,d0
	bsr	co
	move	d3,d0
	bsr	co
	lea	store+l_objects(a5),a3
	move	#maxobjects,d3
osend:	tst.b	o_x(a3)
	bmi.s	osendnext
	move.l	a3,a2
	moveq	#o_size,d2
	bsr	send
osendnext:	lea	o_size(a3),a3
	subq	#1,d3
	bne.s	osend
	lea	store+l_levels(a5),a3
	moveq	#5,d3
sl:	move.l	a3,a2
	move	#edge*edge,d2
	move.b	(a2),d0
sl2:	cmp.b	(a2)+,d0
	bne.s	sl3
	subq	#1,d2
	bne.s	sl2
	bra.s	sl4
sl3:	move.l	a3,a2
	move	#edge*edge,d2
	bsr	send
sl4:	lea	edge*edge(a3),a3
	subq	#1,d3
	bne.s	sl

	bra.s	closeupshop




send:	move.b	(a2)+,d0
	bsr	co
	subq	#1,d2
	bne.s	send
	rts

closeupshop:	bsr	flush
	move.l	ohand(a5),d1
	jsr	dosclose(a6)
exit2:	move.l	ihand(a5),d1
	jsr	dosclose(a6)
exit:	rts
hexout:	move	d0,d1
	ror.b	#4,d0
	bsr.s	digit
	move	d1,d0
digit:	andi	#$f,d0
	move.b	digits(pc,d0),d0
	bra	co
digits:	dc.b	'0123456789ABCDEF'
hexcomp:	moveq	#0,d0
hexcomplp:	move.b	(a0)+,d1
	subi.b	#'0',d1
	bcs.s	hexcompdone
	cmpi.b	#10,d1
	bcs.s	decdigit
	subi.b	#'a'-'0'-10,d1
	cmpi.b	#10,d1
	bcs.s	hexcompdone
	cmpi.b	#16,d1
	bcc.s	hexcompdone
decdigit:	lsl.l	#4,d0
	or.b	d1,d0
	bra.s	hexcomplp
hexcompdone:	rts

init:	lea	obuff(a5),a0
	move.l	a0,opoint(a5)
	clr	ocount(a5)
	clr	icount(a5)
	rts
ci4:	bsr.s	ci2
	swap	d0
ci2:	bsr.s	ci
	rol	#8,d0
ci:	tst	icount(a5)
	bne.s	stillmorein
	movem.l	d0-d3,-(a7)
	move.l	ihand(a5),d1
	lea	ibuff(a5),a0
	move.l	a0,ipoint(a5)
	move.l	a0,d2
	move.l	#buffersize,d3
	jsr	dosread(a6)
	move	d0,icount(a5)
	beq.s	exitci
	movem.l	(a7)+,d0-d3
stillmorein:	subq	#1,icount(a5)
	move.l	ipoint(a5),a0
	move.b	(a0)+,d0
	move.l	a0,ipoint(a5)
	rts
exitci:	movem.l	(a7)+,d0-d3
	rts
co4:	swap	d0
	bsr.s	co2
	swap	d0
co2:	rol	#8,d0
	bsr.s	co
	rol	#8,d0
co:	cmpi	#buffersize,ocount(a5)
	bne.s	stillnotfull
	bsr.s	flush
stillnotfull:	move.l	opoint(a5),a0
	move.b	d0,(a0)+
	move.l	a0,opoint(a5)
	addq	#1,ocount(a5)
	rts

flush:	movem.l	d0-d3,-(a7)
	move.l	ohand(a5),d1
	lea	obuff(a5),a0
	move.l	a0,opoint(a5)
	move.l	a0,d2
	move	ocount(a5),d3
	clr	ocount(a5)
	ext.l	d3
	jsr	doswrite(a6)
	movem.l	(a7)+,d0-d3
	rts

;a4=point,store at a0
token:	move.b	(a4)+,d0
	cmpi.b	#' ',d0
	beq.s	token
	cmpi.b	#9,d0
	beq.s	token
	subq	#1,a4
	moveq	#60,d2
tokenlp:	move.b	(a4)+,d0
	beq.s	tokendone
	cmpi.b	#' ',d0
	beq.s	tokendone
	cmpi.b	#9,d0
	beq.s	tokendone
	cmpi.b	#10,d0
	beq.s	tokendone
	subq	#1,d2
	bmi.s	tokenlp
	move.b	d0,(a0)+
	bra.s	tokenlp
tokendone:	clr.b	(a0)+
	subq	#1,a4
	rts
messagelp:	bsr	co
message:	move.b	(a2)+,d0
	bne.s	messagelp
	rts

dosname:	dc.b	'dos.library',0

exopenlibrary:	equ	$fffffdd8
excloselibrary:	equ	$fffffe62
dosopen:	equ	$ffffffe2
dosclose:	equ	$ffffffdc
dosread:	equ	$ffffffd6
doswrite:	equ	$ffffffd0
exfreemem:	equ	-$d2
exallocmem:	equ	-$c6
memf_public:	equ	1
