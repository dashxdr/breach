;#test	c:debug ram:test xxx
;#end


excloselibrary:	equ	-$19e
exopenlibrary:	equ	-$228
dosopen:	equ	-$1e
exfreemem:	equ	-$d2
exallocmem:	equ	-$c6
memf_public:	equ	1
doswrite:	equ	-$30
dosclose:	equ	-$24
dosread:	equ	-$2a
dosoutput:	equ	-$3c
offset_beginning:	equ	-1
dosseek:	equ	-$42
memf_clear:	equ	$10000
bm_sizeof:	equ	$28
bm_planes:	equ	8
memf_chip:	equ	2
bm_bytesperrow:	equ	0
bm_depth:	equ	5

fullwidth:	equ	640
fullheight:	equ	200

;#output	ram:mr
;#test	c:debug ram:mr fixed
;#end
;The resource file is as follows:
;
;Every entry has a long word offset into the file at the beginning:
;long offset0
;long offset1
;long offset2
;...
;
;And each offset points to the header, which has:
;byte type
;byte videoType
;byte compressed
;byte padding
;word datasize
;[actual data]

;This file makes a resource file. It takes one paramaters, the resource file
;name
;1> makeresource resourcename
;the resource file will be resourcename.dat
;the parameter file must be resourcename.par
;the first line of the parameter file has the number of resources (max)
;the parameter file has the form of
;filename,resource #,#t,#c,#w,#b...
;the #c sets the compression, default is none
;the #w is put a decimal word after header
;the #b is put a decimal byte after header
;the #t is to define the type

;lines beginning with a * mean grab a picture out of the picture file
;(lines beginning with a M mean do picture stuff, but make a mask)
;example: *titlepic,5,0,0,640,200
;if 640x200, also include the color table after the data
;the picture is the resource header, then
;word pixelwidth
;word height
;word bytesperrow
;plane0,plane1,plane2,plane3
;[color table if 640x200]
;NOTE: if you use *@, that means use the previous iff picture file
;like: *ships,...
;      *@,...
;      *@,...
;      *airplanes,...
;so the program doesn't have to keep reading in the main picture for each one

egafull:	equ	5

parfilemax:	equ	20000
maxresources:	equ	512
transfersize:	equ	65536*4
depth:	equ	4	;4 bitplanes in picture files


	init	0	;resource header
	ubyte	rtype
	ubyte	rvideoType
	ubyte	rcompressed
	ubyte	rpadding
	word	rdatasize
	label	rheadersize

	init	0
	mds	execbase,4
	mds	dosbase,4
	mds	intbase,4
	mds	gfxbase,4
	mds	roffsets,maxresources*4
	mds	filename,64
	mds	oname,4
	mds	parfile,parfilemax
 	mds	ohand,4
	mds	currentline,4
	mds	fhand,4
	mds	header,rheadersize+128
	mds	numresources,2
	mds	picture,1
	mds	mask,1
	mds	temppad,1
	mds	havepicture,1
ibufflen:	equ	1024
	mds	ipnt,4
	mds	ileft,2
	mds	ibuffer,ibufflen
	mds	ihand,4
	mds	byteswide,2
	mds	bmcomp,1
	mds	bmnplanes,1
	mds	bmh,2
	mds	bmw,2
	mds	mapsave,64
	mds	thebitmap,4
	mds	abitmap,bm_sizeof
	mds	respoint,4
	mds	xoff,2
	mds	yoff,2
	mds	xsize,2
	mds	ysize,2
	mds	xc,2
	mds	yc,2
	mds	pointer,4
	mds	tiles,4
	mds	tile,32
	mds	tpoint,4
	mds	planesize,2
	mds	offset,2
	mds	transferblock,transfersize	;make me last
	label	workspace

	move.l	4.w,a6
	move.l	a0,a2
	move.l	d0,d2
	move.l	#workspace,d0
	move.l	#memf_clear+memf_public,d1
	jsr	exallocmem(a6)
	tst.l	d0
	beq.s	nomem
	move.l	d0,a5

	move.l	a6,execbase(a5)

	lea	gfxname(pc),a1
	moveq	#0,d0
	jsr	exopenlibrary(a6)
	move.l	d0,gfxbase(a5)
	lea	intname(pc),a1
	moveq	#0,d0
	jsr	exopenlibrary(a6)
	move.l	d0,intbase(a5)
	lea	dosname(pc),a1
	moveq	#0,d0
	jsr	exopenlibrary(a6)
	move.l	d0,dosbase(a5)

	bsr.s	do

	move.l	execbase(a5),a6
	move.l	dosbase(a5),a1
	jsr	excloselibrary(a6)
	move.l	intbase(a5),a1
	jsr	excloselibrary(a6)
	move.l	gfxbase(a5),a1
	jsr	excloselibrary(a6)
	move.l	a5,a1
	move.l	#workspace,d0
	jsr	exfreemem(a6)
nomem:	rts

do:	move.l	dosbase(a5),a6
	jsr	dosoutput(a6)
	move.l	d0,ohand(a5)
	clr.b	-1(a2,d2)
	move.l	a2,oname(a5)
	lea	filename(a5),a0
	move.l	a0,d1
makeparname:	move.b	(a2)+,(a0)+
	bne.s	makeparname
	subq	#1,a0
	move.b	#'.',(a0)+
	move.b	#'p',(a0)+
	move.b	#'a',(a0)+
	move.b	#'r',(a0)+
	clr.b	(a0)+
	move.l	#1005,d2
	move.l	dosbase(a5),a6
	jsr	dosopen(a6)
	move.l	d0,d4
	beq	noparfile
	move.l	d0,d1
	lea	parfile(a5),a4
	move.l	a4,d2
	move.l	#parfilemax,d3
	jsr	dosread(a6)
	move.b	#10,0(a4,d0)
	clr.b	1(a4,d0)
	move.l	d4,d1
	jsr	dosclose(a6)

	lea	filename(a5),a0
	move.l	a0,d1
finddot:	cmpi.b	#'.',(a0)+
	bne.s	finddot
	clr.b	-(a0)
;	move.b	#'d',(a0)+
;	move.b	#'a',(a0)+
;	move.b	#'t',(a0)+
	move.l	#1006,d2
	jsr	dosopen(a6)
	move.l	d0,fhand(a5)
	beq	nooutputfile

xxx:	move.l	a4,currentline(a5)
	bsr	getnumber
	beq	parerror
	cmpi.b	#10,(a4)+
	bne	parerror
	move	d0,numresources(a5)
	move.l	d0,d3
	asl.l	#2,d3
	move.l	d3,respoint(a5)

	move.l	fhand(a5),d1
	jsr	doswrite(a6)

	clr.b	havepicture(a5)

scanparfile:	move.l	a4,currentline(a5)
	move.l	a4,pointer(a5)
	cmpi.b	#';',(a4)
	beq	skiptocr
	tst.b	(a4)
	beq	parsdone
	cmpi.b	#10,(a4)
	beq	skiptocr

	bsr	getnumber
	beq	parerror
	cmpi	#maxresources,d0
	bcc	parerror
	cmpi.b	#',',(a4)+
	bne	parerror
	lsl	#2,d0
	move	d0,d4

	bsr	getname

	lea	roffsets(a5),a0
	move.l	respoint(a5),0(a0,d4)

	bsr	freepicture

	lea	filename(a5),a0
	lea	abitmap(a5),a1
	bsr	readiff
	beq	parerror
	st	havepicture(a5)

;	bsr	commanumber
;	bne	parerror
;	move	d0,xoff(a5)
;	bsr	commanumber
;	bne	parerror
;	move	d0,yoff(a5)

h:	bsr	commanumber
	bne	parerror
	move	d0,xsize(a5)
	bsr	commanumber
	bne	parerror
	move	d0,ysize(a5)
	mulu	xsize(a5),d0
	add	d0,d0
	beq	parerror

	move.l	a4,pointer(a5)

	lea	transferblock(a5),a0
	clr	(a0)+
	move.b	xsize+1(a5),(a0)+
	move.b	ysize+1(a5),(a0)+

	lea	mapsave(a5),a1
	moveq	#16,d1
copycolors:	move	(a1)+,d2
	move	d2,d3
	andi	#$f0f,d3
	eor	d3,d2
	ror	#8,d3
	or	d3,d2
	move	d2,(a0)+
	subq	#1,d1
	bne.s	copycolors

	move.l	a0,a4
	adda	d0,a0
	move.l	a0,tiles(a5)
	move.l	a0,tpoint(a5)

	moveq	#0,d7
	move	ysize(a5),yc(a5)
yloop:	move	xsize(a5),xc(a5)
xloop:	lea	tile(a5),a3
	lea	abitmap+bm_planes(a5),a1
	moveq	#4,d1
ploop:	move.l	(a1)+,a0
	adda	d7,a0
	moveq	#8,d0
lloop:	move.b	(a0),(a3)+
	adda	abitmap+bm_bytesperrow(a5),a0
	subq	#1,d0
	bne.s	lloop
	subq	#1,d1
	bne.s	ploop

	move.l	tpoint(a5),a3
	lea	tile(a5),a0
	moveq	#8,d4
tc1:	move.b	24(a0),d3
	move.b	16(a0),d2
	move.b	8(a0),d1
	move.b	(a0)+,d0
	moveq	#8,d5
	moveq	#0,d6
tc2:	roxl.b	#1,d3
	roxl.l	#1,d6
	roxl.b	#1,d2
	roxl.l	#1,d6
	roxl.b	#1,d1
	roxl.l	#1,d6
	roxl.b	#1,d0
	roxl.l	#1,d6
	subq	#1,d5
	bne.s	tc2
	move.l	d6,(a3)+
	subq	#1,d4
	bne.s	tc1

	moveq	#0,d6
	move.l	tiles(a5),a0
tcheck:	move.l	tpoint(a5),a1
	cmpa.l	a1,a0
	beq.s	keepit
	moveq	#32,d0
	move.l	a0,a2
tchecklp:	cmpm.l	(a2)+,(a1)+
	bne.s	tnext
	subq	#4,d0
	bne.s	tchecklp
	bra.s	equal
tnext:	addq	#1,d6
	lea	32(a0),a0
	bra.s	tcheck
keepit:	addi.l	#32,tpoint(a5)
	addq	#1,transferblock(a5)
equal:	move	d6,(a4)+

	addq	#1,d7
	subq	#1,xc(a5)
	bne	xloop
	sub	xsize(a5),d7
	move	abitmap+bm_bytesperrow(a5),d0
	lsl	#3,d0
	add	d0,d7
	subq	#1,yc(a5)
	bne	yloop

	lea	transferblock(a5),a0
	move.l	a0,d2
	move.l	fhand(a5),d1
	move.l	tpoint(a5),d3
	sub.l	d2,d3
	add.l	d3,respoint(a5)
	jsr	doswrite(a6)

	bra	skiptocr


commanumber:	cmpi.b	#',',(a4)+
	bne.s	commanumberbad
	bsr	getnumber
	bne.s	cngood
commanumberbad:	moveq	#-1,d1
	rts
cngood:	moveq	#0,d1
	rts
;a0=line to pack
;a1=output
;d4=number of bytes

pack:	move.b	(a0)+,d5
	subq	#1,d4
p1:	moveq	#0,d1
	move.l	a0,a2
	subq	#1,a2
p2:	moveq	#1,d2
p3:	subq	#1,d4
	bcs.s	pout2
	move.b	(a0)+,d0
	cmp.b	d0,d5
	bne.s	notsame
	addq	#1,d2
	bra.s	p3
notsame:	tst	d1
	beq.s	noliteral
	cmpi	#3,d2
	bge.s	n2
n1:	move.b	d0,d5
	add	d2,d1
	bra.s	p2
noliteral:	cmpi	#2,d2
	blt.s	n1
n2:	bsr.s	pout
	move.b	d0,d5
	bra.s	p1
pout2:	cmpi	#3,d2
	bge.s	pout
	add	d2,d1
	moveq	#1,d2
pout:	move	d0,-(a7)
	move	d1,d0
	beq.s	nolit
	subq	#1,d0
	move.b	d0,(a1)+
litlp:	move.b	(a2)+,(a1)+
	subq	#1,d1
	bne.s	litlp
nolit:	moveq	#1,d0
	sub	d2,d0
	beq.s	norep
	move.b	d0,(a1)+
	move.b	d5,(a1)+
norep:	move	(a7)+,d0
	rts



freepicture:	tst.b	havepicture(a5)
	beq.s	nohavepicture
	clr.b	havepicture(a5)
	lea	abitmap(a5),a2
	move.l	execbase(a5),a6
	move	bm_bytesperrow(a2),d2
	mulu	bm_rows(a2),d2
	move.b	bm_depth(a2),d3
	lea	bm_planes(a2),a2
freepiclp:	move.l	(a2)+,a1
	move.l	d2,d0
	jsr	exfreemem(a6)
	subq.b	#1,d3
	bne.s	freepiclp
nohavepicture:	rts



parerror:	lea	parerrormsg(pc),a0
	moveq	#parerrorlen,d3
	bsr	error
	move.l	currentline(a5),a4
	move.l	a4,d2
scr2:	cmpi.b	#10,(a4)+
	bne.s	scr2
	move.l	ohand(a5),d1
	move.l	a4,d3
	sub.l	d2,d3
	jsr	doswrite(a6)
	bra	scanparfile
setoffset:	addq	#1,a4
	bsr	getnumber
	beq	parerror
	move	d0,offset(a5)
skiptocr:	move.l	pointer(a5),a4
stcrlp:	cmpi.b	#10,(a4)+
	bne.s	stcrlp
	bra	scanparfile
parsdone:	move.l	fhand(a5),d1
	moveq	#0,d2
	moveq	#offset_beginning,d3
	jsr	dosseek(a6)
	move.l	fhand(a5),d1
	lea	roffsets(a5),a0
	move.l	a0,d2
	moveq	#0,d3
	move	numresources(a5),d3
	asl.l	#2,d3
	jsr	doswrite(a6)
	move.l	fhand(a5),d1
	jsr	dosclose(a6)

	bsr	freepicture


	rts





;a0=after header,a4=text to scan, do the #b,#w,#c,#t
scanloop:	addq	#1,a4
scanmore:	cmpi.b	#',',(a4)
	bne.s	scannedmore
	addq	#1,a4
	bsr.s	getnumber
	tst	d2
	beq.s	scannedmore
	move.b	(a4),d1
	cmpi.b	#'b',d1
	beq.s	scanbyte
	cmpi.b	#'w',d1
	beq.s	scanword
	cmpi.b	#'c',d1
	beq.s	setcomp
	cmpi.b	#'t',d1
	beq.s	settype
	moveq	#1,d0
	rts
scannedmore:	moveq	#0,d0
	rts
scanword:	ror	#8,d0
	move.b	d0,(a0)+
	ror	#8,d0
scanbyte:	move.b	d0,(a0)+
	bra.s	scanloop
setcomp:	move.b	d0,header+rcompressed(a5)
	bra.s	scanloop
settype:	move.b	d0,header+rtype(a5)
	bra.s	scanloop

getnumber:	moveq	#0,d0
	moveq	#0,d1
	moveq	#0,d2
getnumberlp:	move.b	(a4),d1
	subi.b	#'0',d1
	bcs.s	gotnumber
	cmpi.b	#10,d1
	bcc.s	gotnumber
	mulu	#10,d0
	add.l	d1,d0
	addq	#1,a4
	addq	#1,d2
	bra.s	getnumberlp
gotnumber:	tst	d2
	rts
	
getname:	lea	filename(a5),a0
getnamelp:	move.b	(a4),d0
	cmpi.b	#',',d0
	beq.s	gotname
	cmpi.b	#10,d0
	beq.s	gotname
	move.b	d0,(a0)+
	addq	#1,a4
	bra.s	getnamelp
gotname:	clr.b	(a0)
	rts

nooutputfile:	lea	nooutmsg(pc),a0
	moveq	#nooutlen,d3
	bra.s	error
noparfile:	lea	noparmsg(pc),a0
	moveq	#noparlen,d3
error:	move.l	a0,d2
	move.l	ohand(a5),d1
	move.l	dosbase(a5),a6
	jmp	doswrite(a6)


;a0=name,a1=bitmap
;fills in bitmap and allocates planes
readiff:	move.l	a1,thebitmap(a5)
	move.l	a0,d1
	move.l	#1005,d2
	move.l	dosbase(a5),a6
	jsr	dosopen(a6)
	move.l	d0,ihand(a5)
	beq.s	badread
	clr	ileft(a5)
	move.l	a4,-(a7)
	bsr.s	doiff
	move.l	(a7)+,a4
	move.l	ihand(a5),d1
	move.l	dosbase(a5),a6
	jsr	dosclose(a6)
	moveq	#1,d0
badread:	rts

ifferror:	rts
doiff:	clr.b	bmnplanes(a5)
	bsr	readlong
	move.l	d0,d4
	bsr	readlong
	move.l	d0,d5
	cmpi.l	#'FORM',d4
	bne	ifferror
	bsr	readlong
	cmpi.l	#'ILBM',d0
	bne	ifferror
doiffloop:	pea	doiffloop(pc)
	bsr	readlong
	move.l	d0,d4
	bsr	readlong
	move.l	d0,d5
	cmpi.l	#'BMHD',d4
	beq	dobmhd
	cmpi.l	#'BODY',d4
	beq	dobody
	cmpi.l	#'CMAP',d4
	beq	docmap
skipblock:	addq	#1,d5
	andi	#$fffe,d5
sblp:	bsr	readbyte
	subq.l	#1,d5
	bne.s	sblp
	rts
docmap:	divu	#3,d5
	lea	mapsave(a5),a2
cmaplp:	bsr	readbyte
	rol	#4,d0
	andi	#$f00,d0
	move	d0,d3
	bsr	readbyte
	andi	#$f0,d0
	or	d0,d3
	bsr	readbyte
	ror	#4,d0
	andi	#$f,d0
	or	d0,d3
	move	d3,(a2)+
	subq	#1,d5
	bne.s	cmaplp
	rts

dobmhd:	move.l	thebitmap(a5),a2
	bsr	readword	; w
	move	d0,bmw(a5)
	addq	#7,d0
	asr	#3,d0
	move	d0,byteswide(a5)
	move	d0,bm_bytesperrow(a2)
	move	d0,d2
	bsr	readword	; h
	move	d0,bmh(a5)
	move	d0,bm_rows(a2)
	mulu	d0,d2
	bsr	readlong	; x,y
	bsr	readbyte	; nplanes
	move.b	d0,bmnplanes(a5)
	move.b	d0,bm_depth(a2)
	move.b	d0,d3
	bsr	readbyte	; masking
	bsr	readbyte	; compression
	move.b	d0,bmcomp(a5)
	bsr	readbyte	; pad
	bsr	readword	; transp
	bsr	readword	; aspects
	bsr	readlong	; pw,ph
	move.l	execbase(a5),a6
	lea	bm_planes(a2),a2
allocbm:	move.l	d2,d0
	moveq	#memf_public,d1
	jsr	exallocmem(a6)
	move.l	d0,(a2)+
;Z if no allocate, no check
	subq.b	#1,d3
	bne.s	allocbm
	move.l	dosbase(a5),a6
	rts

dobody:	moveq	#0,d1
	moveq	#0,d6	; offset in plane
	move	bmh(a5),d5
dobodyouter:	move.b	bmnplanes(a5),d7
	move.l	thebitmap(a5),a3
	lea	bm_planes(a3),a3
dobodylp:	move.l	(a3)+,a2
	adda	d6,a2
	move	byteswide(a5),d4
	bsr	readline
	subq.b	#1,d7
	bne.s	dobodylp
	add	byteswide(a5),d6
	subq	#1,d5
	bne	dobodyouter
	addq	#4,a7
	rts
readline:	cmpi.b	#1,bmcomp(a5)
	beq.s	unpack
notpacked:	bsr	readbyte
	move.b	d0,(a2)+
	subq	#1,d4
	bne.s	notpacked
	rts
unpack:	bsr	readbyte
	tst.b	d0
	bpl.s	literal
	cmpi.b	#$80,d0
	beq.s	unpack
	neg.b	d0
	addq.b	#1,d0
	move.b	d0,d1
	sub	d1,d4
	bsr	readbyte
replicatelp:	move.b	d0,(a2)+
	subq.b	#1,d1
	bne.s	replicatelp
	bra.s	chklineend
literal:	addq.b	#1,d0
	move.b	d0,d1
	sub	d1,d4
literallp:	bsr	readbyte
	move.b	d0,(a2)+
	subq.b	#1,d1
	bne.s	literallp
chklineend:	tst	d4
	bne.s	unpack
	rts

readlong:	bsr.s	readword
	swap	d0
readword:	bsr.s	readbyte
	rol	#8,d0
readbyte:	subq	#1,ileft(a5)
	bcc.s	byteok
	movem.l	d0-d3/a1,-(a7)
	move.l	ihand(a5),d1
	lea	ibuffer(a5),a0
	move.l	a0,ipnt(a5)
	move.l	a0,d2
	move.l	#ibufflen,d3
	move.l	dosbase(a5),a6
	jsr	dosread(a6)
	move	d0,ileft(a5)
	movem.l	(a7)+,d0-d3/a1
	bne.s	readbyte
	rts
byteok:	move.l	ipnt(a5),a0
	move.b	(a0)+,d0
	move.l	a0,ipnt(a5)
	rts
bm_rows:	equ	2




nooutmsg:	dc.b	'Cannot open output file.',10,0
nooutlen:	equ	*-nooutmsg
parerrormsg:	dc.b	'Parameter error: ',0
parerrorlen:	equ	*-parerrormsg
noparmsg:	dc.b	'Can't find parameter file.',10,0
noparlen:	equ	*-noparmsg
dosname:	dc.b	'dos.library',0
intname:	dc.b	'intuition.library',0
gfxname:	dc.b	'graphics.library',0
